geom_line() +
coord_cartesian(xlim = c(0, 10)) +
scale_color_viridis_d(end = 0.8) +
labs(x = "Taille de l'effet (Δx̄/sd)", y = "Puissance", title = "Estimation de la puissance", colour = "Sample size") +
theme_bw(base_size = 18) + theme(legend.position = "none")
r <- 1
scale = 0.1
x <- seq(-r, r, scale)
nrow.m <- ncol.m <- length(x)
Xg <- expand.grid(X1 = 1:nrow.m, X2=1:ncol.m, X3=1:nrow.m)
Xg$X1g <- (Xg$X1-1)*scale-r
Xg$X2g <- (Xg$X2-1)*scale-r
Xg$X3g <- (Xg$X3-1)*scale-r
Xg$D <- as.numeric(runif(nrow(Xg))<0.1)
m <- matrix(nrow=nrow.m,ncol=ncol.m)
m[as.matrix(Xg[1:2])] <- Xg[,7]
lim <- 1.55
plot(0,0,xlim=c(-lim,lim),ylim=c(-lim,lim),asp=1)
image(x,x,m,col=c("gray", "white"),add=TRUE)
Dom <- data.frame(x = c(-1, -1, 1, 1, -1), y = c(-1, 1, 1, -1, -1))
lines(Dom, lwd = 2, col = "green")
x
x
m
?image
lim <- 1.55
plot(0,0,xlim=c(-lim,lim),ylim=c(-lim,lim),asp=1)
image(x,x,m,col=c("gray", "white"), xlim = c(-1, 1), add=TRUE)
Dom <- data.frame(x = c(-1, -1, 1, 1, -1), y = c(-1, 1, 1, -1, -1))
lines(Dom, lwd = 2, col = "green")
x
length(x)
lim <- 1.55
plot(0,0,xlim=c(-lim,lim),ylim=c(-lim,lim),asp=1)
x2 <- seq(-0.95, 0.95, length.out = 21)
image(x2, x2, m,col=c("gray", "white"), xlim = c(-1, 1), add=TRUE)
Dom <- data.frame(x = c(-1, -1, 1, 1, -1), y = c(-1, 1, 1, -1, -1))
lines(Dom, lwd = 2, col = "green")
1 + 1
# commentaire 2
#Commentaire
1 + 1
# commentaire 2
1 + 1
# commentaire 2
1 + 1
# commentaire 2
?diff
x <- 1:5
diff(x)
diff(x, lag = 2)
diff(1:10, 2, 2)
x <- cumsum(cumsum(1:10))
x
diff(x, lag = 2)
diff(x, differences = 2)
diff(x, lag = 2)
diff(x, differences = 3)
diff(x, lag = 2)
diff(x, differences = 4)
diff(x, lag = 2)
diff(x, differences = 5)
2/6
2/8
3/8
shiny::runApp('work/projects/cascade/perepigenomics')
library(grDevices)
install.packages("~/work/temp/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
library(mvpart)
browseVignettes("mvpart")
?mvpart
17500000000/213000000
1600/7.8
1800/9
7800/108
6300/88
36/200
100/6
2/13
3/13
2/11
1/6
1/5
1/7
?shiny::runApp
?grconvertY
?pretty
blogdown:::new_post_addin()
rand <- runif(100000)
# if 25% is the good answer
# 2 good anwers (a and d)
length(which(rand <= 0.5 )) / length(rand)
# if 50% is the good answer
# 1 good answer
length(which(rand <= 0.25)) / length(rand)
65*4
19000 - 3840 - 6940
## Paramètres
r <- sqrt(2)
scale = 0.0707
s <- r + 0.001
ss <- -r-0.001
## Création de la grille de points
Xg <- expand.grid(X1 = seq(-r,r,scale), X2=seq(-r,r,scale))
Xg <- as.matrix(Xg)
sphere <- sqrt(Xg[,1]^2+Xg[,2]^2)
Xg2 <- cbind(Xg, sphere)
Xg3 <- Xg2[Xg2[,3]<=r+0.001,]
X <- Xg3[,-3]
rm(Xg,Xg2,Xg3)
## graphique
matplot(X[,1], X[,2], pch=1)
x
X
head(X)
sample("accept", "minor revision", "major revision", "reject")
sample(c("accept", "minor revision", "major revision", "reject"))
sample(c("accept", "minor revision", "major revision", "reject"), 1)
sample(c("accept", "minor revision", "major revision", "reject"), 1)
sample(c("accept", "minor revision", "major revision", "reject"), 1)
sample(c("accept", "minor revision", "major revision", "reject"), 1)
library(data.table)
set.seed(456)
don <- data.table(col1 = rbinom(10,1,0.5),
col2 = c(1:10))
myfunc <- function(par1, par2) {
don[par1==1,par2]
}
myfunc("col1", "col2")
# je veux qu'il me retrouve ce calcul : don[col1==1,col2] -> 3 4 5
don
myfunc <- function(par1, par2) {
don[eval(quote(par1)) == 1, eval(quote(par2))]
}
myfunc("col1", "col2")
myfunc <- function(par1, par2) {
don[get(quote(par1)) == 1, get(quote(par2))]
}
myfunc("col1", "col2")
myfunc <- function(par1, par2) {
don[get(par1) == 1, get(par2)]
}
myfunc("col1", "col2")
?get
BiocManager::install("BSgenome.Sscrofa.UCSC.susScr11", version = "3.8")
library("BSgenome.Sscrofa.UCSC.susScr11")
sscr11 <- BSgenome.Sscrofa.UCSC.susScr11
# PYY
# pigs (11): chr12:19,182,627-19,183,712
View(sscr11$chr12, start = 19182627, end = 9183712)
# PYY
# pigs (11): chr12:19,182,627-19,183,712
Views(sscr11$chr12, start = 19182627, end = 9183712)
# PYY
# pigs (11): chr12:19,182,627-19,183,712
Views(sscr11$chr12, start = 19182627, end = 19183712)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19", version = "3.8")
library("BSgenome.Sscrofa.UCSC.susScr11.masked")
BiocManager::install("BSgenome.Sscrofa.UCSC.susScr11.masked", version = "3.8")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19.masked", version = "3.8")
# GCG ----------------
# pigs 11: chr15:68,811,567-68,812,179
Views(sscr11$chr15, start = 68811567, end = 68812179)
library("BSgenome.Sscrofa.UCSC.susScr11")
library("BSgenome.Hsapiens.UCSC.hg19")
sscr11 <- BSgenome.Sscrofa.UCSC.susScr11
hg19 <- BSgenome.Hsapiens.UCSC.hg19
# GCG ----------------
# pigs 11: chr15:68,811,567-68,812,179
Views(sscr11$chr15, start = 68811567, end = 68812179)
Views(sscr11$chr15, start = 68811567, end = 68812179)
# human chr2:163,009,956-163,010,661
Views(hg19$chr2, start = 163009956, end = 163010661)
library(dplyr)
# GCG ----------------
# pigs 11: chr15:68,811,567-68,812,179
Views(sscr11$chr15, start = 68811567, end = 68812179)
# GCG ----------------
# pigs 11: chr15:68,811,567-68,812,179
Views(sscr11$chr15, start = 68811567, end = 68812179) %>% as.character()
Views(sscr11$chr15, start = 68811567, end = 68812179) %>% as.character()
# human chr2:163,009,956-163,010,661
Views(hg19$chr2, start = 163009956, end = 163010661) %>% as.character()
# pigs11: chr1:160,771,706-160,772,436
Views(sscr11$chr1, start = 160771706, end = 160772436) %>% as.character()
# hg19: chr18:58,039,869-58,040,294
Views(hg19$chr18, start = 58039869, end = 58040294) %>% as.character()
# PYY
# pigs (11): chr12:19,182,627-19,183,712
Views(sscr11$chr12, start = 19182627, end = 19183712)
# PYY
# pigs (11): chr12:19,182,627-19,183,712
Views(sscr11$chr12, start = 19182627, end = 19183712) %>% as.chracter()
# PYY
# pigs (11): chr12:19,182,627-19,183,712
Views(sscr11$chr12, start = 19182627, end = 19183712) %>% as.character()
# PYY
# pigs (11): chr12:19,207,567-19,208,217
Views(sscr11$chr12, start = 19207567, end = 19208217) %>% as.character()
# hg19: chr3:42,305,985-42,306,596
Views(hg19$chr3, start = 42305985, end = 42306596) %>% as.character()
# CCK -------------
# pigs11: chr13:25,944,350-25,946,056
Views(sscr11$chr13, start = 25944350, end = 25946056) %>% as.character()
# GIP ---------------
# pig11: chr12:25,167,025-25,168,656
Views(sscr12$chr13, start = 25167025, end = 25168656) %>% as.character()
# GIP ---------------
# pig11: chr12:25,167,025-25,168,656
Views(sscr11$chr12, start = 25167025, end = 25168656) %>% as.character()
# PYY -------------
# pigs (11): chr12:19,207,143-19,208,228
Views(sscr11$chr12, start = 19207143, end = 19208228) %>% as.character()
# PYY -------------
# pigs (11): chr12:19,207,143-19,208,228
Views(sscr11$chr12, start = 19207143, end = 19208228) %>% as.character()
library(tidyverse)
tibble(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1)) %>%
geom(aes(x = x, y = y)) +
geom_aera()
tibble(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1)) %>%
ggplot(aes(x = x, y = y)) +
geom_aera()
tibble(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1)) %>%
ggplot(aes(x = x, y = y)) +
geom_area()
tibble(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1)) %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "red")
tibble(x = c(0, 1, 1, 0), y = c(0, 0, 1, 1)) %>%
ggplot(aes(x = x, y = y)) +
geom_area(fill = "red", colour = "green")
4500/12
# hg19 roadmap: chr17:47,049,620-47,050,362
Views(hg19$chr17, start = 47049620, end = 47050362) %>% as.character()
library("BSgenome.Sscrofa.UCSC.susScr11")
library("BSgenome.Hsapiens.UCSC.hg19")
library(dplyr)
sscr11 <- BSgenome.Sscrofa.UCSC.susScr11
hg19 <- BSgenome.Hsapiens.UCSC.hg19
# hg19 roadmap: chr17:47,049,620-47,050,362
Views(hg19$chr17, start = 47049620, end = 47050362) %>% as.character()
# GIP v2 :
# chr12:25,166,549-25,177,492
Views(sscr11$chr12, start = 25166549, end = 25177492) %>% as.character()
# GIP v2 :
# chr12:25,166,549-25,177,492
Views(sscr11$chr12, start = 25166549 + 3000, end = 25166549 + 4200) %>% as.character()
# GIP v2 :
# chr12:25,166,549-25,177,492
Views(sscr11$chr12, start = 25166549 + 3000, end = 25166549 + 4200) %>% as.character()
e^pi
exp(pi)
exp(pi) - pi
1 000 000
1_000_000
1,000,000
1·000·000
1/0
log(0)
5/(0:10)
plot(5/(0:10))
7.1 * 3
library(tidyverse)
tibble(
a = c(1, 2, 10, 11, 4, 5),
b = c(1, 1, 2, 2, 3, 3),
d = rep(c(2014, 2009), 3)
) %>%
ggplot(aes(a, b)) +
geom_point()
tibble(
a = c(1, 2, 10, 11, 4, 5),
b = c(1, 1, 2, 2, 3, 3),
d = rep(c(2014, 2009), 3)
) %>%
ggplot(aes(b, a)) +
geom_point()
library(gganimate)
tibble(
a = c(1, 2, 10, 11, 4, 5),
b = c(1, 1, 2, 2, 3, 3),
d = rep(c(2014, 2009), 3)
) %>%
ggplot(aes(b, a)) +
geom_point() +
transition_states(factor(d))
?animate
a <- tibble(
a = c(1, 2, 10, 11, 4, 5),
b = c(1, 1.2, 1.8, 2, 3, 3),
d = rep(c(2014, 2009), 3)
) %>%
ggplot(aes(b, a)) +
geom_point() +
transition_states(factor(d))
animate(a, nframes = 10, fps = 5)
animate(a, nframes = 10, fps = 8)
animate(a, nframes = 20, fps = 10)
sessionInfo()
?t
tibble(a= letters, b = runif(24), c = runif(24))
library(tidyverse)
tibble(a= letters, b = runif(24), c = runif(24))
tibble(a= letters, b = runif(26), c = runif(26))
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = a)
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = .$a)
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = .$a)
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = a)
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = "a")
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = "a") %>% t()
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = "a") %>% t() %>% .[-1, ]
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = "a") %>% {t() %>% .[-1, ]
x[-1, ]
tibble(a= letters, b = runif(26), c = runif(26)) %>% as.data.frame(row.names = "a") %>% {
x <- t(.)
x[-1, ]
}
tibble(a= letters, b = runif(26), c = runif(26)) %>% {
x <- t(.)
x[-1, ]
}
?scan
tiblle(a = 1:5, b = 5:1)
data.frame(a = 1:5, b = 5:1)
data.frame(a = 1:5, b = 5:1)[[1]]
?write
?methods::
?methods
?methods::callNextMethod
?tcrossprod
X=matrix(c(1,2,0,2,0,1,1,0,0,1,1,2,0,0,2),ncol=5,nrow=3)
p=c(0.5,0.22,0.4,0.13,0.10)
#construct G (additive genomic relationship matrix (Van raden 2008)
Eadd=matrix(NA,ncol=ncol(X),nrow=nrow(X))
for(i in 1:ncol(X))
{
cat('Building Eadd for SNP =',i,'\n')
Eadd[,i]=2*p[i]
}
cat('Building Zadd and G\n');
denominator_g=2*sum(p*(1-p))
Zadd=X-Eadd
message(Zadd)
message(denominator_g)
message(tcrossprod(Zadd))
G=tcrossprod
G
G=tcrossprod(Zadd)/denominator_g
G
?write.matrix
?write
imap_chr(sample(10), ~ paste0(.y, ": ", .x))
purrr::imap_chr(sample(10), ~ paste0(.y, ": ", .x))
12*125
3.75*12
6*125
5*12
2.5*12
0.75*4
45*4
5*4
20*5000
20/50000
20/50
4*9*2
50*4
200/50000
10/0.2
10/0.8
10/0.5
4*50
200/20000
15*250
7.5*3
?kde2d
?image.plot
library(MASS)
attach(geyser)
plot(duration, waiting, xlim = c(0.5,6), ylim = c(40,100))
f1 <- kde2d(duration, waiting, n = 50, lims = c(0.5, 6, 40, 100))
image(f1, zlim = c(0, 0.05))
f1 <- kde2d(duration[-272], duration[-1],
h = rep(1.5, 2), n = 50, lims = c(0.5, 6, 0.5, 6))
contour(f1, xlab = "previous duration",
ylab = "duration", levels  =  c(0.05, 0.1, 0.2, 0.4) )
attach(geyser)
detach(geyser)
geyser
head(geyser)
f1 <- kde2d(
geyser$duration[-272],
geyser$duration[-1],
h = rep(1.5, 2),
n = 50,
lims = c(0.5, 6, 0.5, 6)
)
image(f1)
contour(f1)
image(f1, col = col2)
?par
image(f1)
par(new=TRUE)
contour(f1)
library(MASS)
head(geyser)
f1 <- kde2d(
geyser$duration[-272],
geyser$duration[-1],
h = rep(1.5, 2),
n = 50,
lims = c(0.5, 6, 0.5, 6)
)
oldpar <- par(mar(c(5, 8, 4, 2)))
image(f1)
par(new=TRUE)
contour(f1)
par(oldpar)
library(MASS)
head(geyser)
f1 <- kde2d(
geyser$duration[-272],
geyser$duration[-1],
h = rep(1.5, 2),
n = 50,
lims = c(0.5, 6, 0.5, 6)
)
oldpar <- par(mar=c(5, 8, 4, 2))
image(f1)
par(new=TRUE)
contour(f1)
par(oldpar)
f1 <- kde2d(
geyser$duration[-272],
geyser$duration[-1],
h = rep(1.5, 2),
n = 50,
lims = c(0.5, 6, 0.5, 6)
)
oldpar <- par(mar=c(5, 4, 4, 8))
image(f1)
par(new=TRUE)
contour(f1)
par(oldpar)
library(maptools)
library(plot3D)
library(rgdal)
library(rgl)
library(raster)
2000000/3000
2.10E9
2E9
2E9/3E3
1.5/12
#Génération de ma grille de points
r <- 1
scale = 0.025
x <- seq(-r, r, scale)
nrow.m <- ncol.m <- length(x)
Xg <- expand.grid(X1 = 1:nrow.m, X2=1:ncol.m)
Xg$X1g <- (Xg$X1-1)*scale-r
Xg$X2g <- (Xg$X2-1)*scale-r
Xg$sphere <- sqrt(Xg[,3]^2 + Xg[,4]^2)
Xg <- Xg[Xg$sphere<r,] #grille de points
Xg$D <- as.numeric(runif(nrow(Xg))<0.1) # ajout d'une colonne avec des 0 et des 1
m <- matrix(nrow=nrow.m,ncol=ncol.m)
m[as.matrix(Xg[1:2])] <- Xg$D
image(x,x,m,asp=1,col=c("gray","white")) # représentation selon 0 et 1
#Génération de ma grille de points
r <- 1
scale = 0.025
x <- seq(-r, r, scale)
nrow.m <- ncol.m <- length(x)
Xg <- expand.grid(X1 = 1:nrow.m, X2=1:ncol.m)
Xg$X1g <- (Xg$X1-1)*scale-r
Xg$X2g <- (Xg$X2-1)*scale-r
Xg$sphere <- sqrt(Xg[,3]^2 + Xg[,4]^2)
Xg <- Xg[Xg$sphere<r,] #grille de points
Xg$D <- as.numeric(runif(nrow(Xg))<0.1) # ajout d'une colonne avec des 0 et des 1
m <- matrix(nrow=nrow.m,ncol=ncol.m)
m[as.matrix(Xg[1:2])] <- Xg$D
image(x,x,m,asp=1,col=c("gray","white")) # représentation selon 0 et 1
Xg
m
library(xaringan)
install.packages("xaringan", Ncpus = 6)
library(xaringan)
1/45*100
xaringan:::inf_mr()
install.packages("icon")
devtools::install_github("ropenscilabs/icon")
install.packages("devtools", Ncpus = 6)
devtools::install_github("ropenscilabs/icon")
xaringan:::inf_mr()
643/594
2400*1.08249
?moon_reader
xaringan:::inf_mr()
?cor.test
install.packages(c("cowplot", "kableExtra", "plotly"))
1000 * 1000 / 21 000
1000 * 1000 / 21000
setwd("~/mnt/inra_p/presentations/2019_07_03_useR/RUG_newRusers")
xaringan::summon_remark()
df1 <- data.frame(X="A", Y="B", Z=0.23)
df2 <- data.frame(X=c("A","C","E"), Y=c("B", "D", "F"), Z=c(0.9, 0.88, 0.1))
df1
df2
subset(df2, paste(df2$X, df2$Y) %in% paste(df1$X, df1$Y))
View(df2)
subset(df2, (paste(df2$X, df2$Y) %in% paste(df1$X, df1$Y)) | (paste(df2$Y, df2$X) %in% paste(df1$X, df1$Y)) ).
subset(df2, (paste(df2$X, df2$Y) %in% paste(df1$X, df1$Y)) | (paste(df2$Y, df2$X) %in% paste(df1$X, df1$Y)) )
